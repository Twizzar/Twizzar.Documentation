import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a9d1f0e8.js";const h=JSON.parse('{"title":"Generics","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"generics.md","filePath":"generics.md"}'),p={name:"generics.md"},o=l(`<h1 id="generics" tabindex="-1">Generics <a class="header-anchor" href="#generics" aria-label="Permalink to &quot;Generics&quot;">​</a></h1><p>This section explains the advanced features of Twizzar for handling generic methods in C#. With Twizzar, you can easily configure, mock, and verify the behavior of generic methods in your unit tests. This feature allows you to set up method responses for different type parameters, specify delegates for method calls, add callbacks, and perform verifications. This section will guide you through the process of using Twizzar to work with generic methods effectively.</p><h2 id="setting-up-generic-methods" tabindex="-1">Setting Up Generic Methods <a class="header-anchor" href="#setting-up-generic-methods" aria-label="Permalink to &quot;Setting Up Generic Methods&quot;">​</a></h2><p>You can configure generic methods using Twizzar to return specific values for different type parameters. Here&#39;s how it works:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Setup_method_with_a_typeParameter_as_return_type</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IGenericExample</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.SimpleGenericMethodT.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, sut.</span><span style="color:#B392F0;">SimpleGenericMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, sut.</span><span style="color:#B392F0;">SimpleGenericMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">object</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, sut.</span><span style="color:#B392F0;">SimpleGenericMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Setup_method_with_a_typeParameter_as_return_type</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sut</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IGenericExample</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.SimpleGenericMethodT.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, sut.</span><span style="color:#6F42C1;">SimpleGenericMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, sut.</span><span style="color:#6F42C1;">SimpleGenericMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">object</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, sut.</span><span style="color:#6F42C1;">SimpleGenericMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>With the IGenericExample interface defined as follows:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IGenericExample</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleGenericMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IGenericExample</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleGenericMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In this example, the <code>SimpleGenericMethod&lt;T&gt;()</code> method is set up to return <code>5</code> when called with <code>int</code> or <code>object</code> type parameters. Other type parameters will return their default values.</p><h2 id="naming-of-generic-methods" tabindex="-1">Naming of Generic Methods <a class="header-anchor" href="#naming-of-generic-methods" aria-label="Permalink to &quot;Naming of Generic Methods&quot;">​</a></h2><p>To differentiate between methods with the same name but different type parameters, Twizzar appends type parameter names to the method name. Here&#39;s an example:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Naming_of_generic_methods</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IGenericExample</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.MyMethod.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.MyMethodT.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.MyMethodTK.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4f</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, sut.</span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, sut.</span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4f</span><span style="color:#E1E4E8;">), sut.</span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Naming_of_generic_methods</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sut</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IGenericExample</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.MyMethod.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.MyMethodT.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.MyMethodTK.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4f</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, sut.</span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">, sut.</span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4f</span><span style="color:#24292E;">), sut.</span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>With the IGenericExample interface defined as follows:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IGenericExample</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">MyMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IGenericExample</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">MyMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In this case, <code>MyMethod()</code> becomes <code>MyMethod</code>, <code>MyMethod&lt;T&gt;</code> becomes <code>MyMethodT</code>, and <code>MyMethod&lt;T, K&gt;()</code> becomes <code>MyMethodTK</code>.</p><h2 id="setting-up-value-delegates" tabindex="-1">Setting Up Value Delegates <a class="header-anchor" href="#setting-up-value-delegates" aria-label="Permalink to &quot;Setting Up Value Delegates&quot;">​</a></h2><p>Twizzar allows you to assign delegates to generic methods for custom behavior. Here&#39;s an example of setting up a delegate for <code>CreateList&lt;T&gt;()</code>:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Setup_value_delegate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IGenericExample</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.CreateListT.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> items.</span><span style="color:#B392F0;">ToList</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sut.</span><span style="color:#B392F0;">CreateList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, list[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, list[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">AreEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, list[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Setup_value_delegate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sut</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IGenericExample</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.CreateListT.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> items.</span><span style="color:#6F42C1;">ToList</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sut.</span><span style="color:#6F42C1;">CreateList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, list[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, list[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">AreEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, list[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The CreateList method is defined as follows:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">IList</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">CreateList</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">IList</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">CreateList</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">params</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">);</span></span></code></pre></div><p>In this example, the <code>CreateList&lt;T&gt;()</code> method is configured to use a custom delegate to create a list from the given items.</p><h2 id="setting-up-a-callback" tabindex="-1">Setting Up a Callback <a class="header-anchor" href="#setting-up-a-callback" aria-label="Permalink to &quot;Setting Up a Callback&quot;">​</a></h2><p>You can add callbacks to generic methods to capture their input parameters and perform custom actions. Here&#39;s an example of setting up a callback for <code>CreateList&lt;T&gt;()</code>:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Setup_a_callback</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">IGenericExample</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">With</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.CreateListT.</span><span style="color:#B392F0;">Callback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> myList.</span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">(items)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    sut.</span><span style="color:#B392F0;">CreateList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Assert.</span><span style="color:#B392F0;">Contains</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, myList.</span><span style="color:#B392F0;">Single</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Setup_a_callback</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sut</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">IGenericExample</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">With</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.CreateListT.</span><span style="color:#6F42C1;">Callback</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> myList.</span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">(items)))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    sut.</span><span style="color:#6F42C1;">CreateList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Assert.</span><span style="color:#6F42C1;">Contains</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, myList.</span><span style="color:#6F42C1;">Single</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In this case, a callback is used to add the input parameters of the <code>CreateList&lt;T&gt;()</code> method to the <code>myList</code> collection.</p><h2 id="verifying-parameter-usage" tabindex="-1">Verifying Parameter Usage <a class="header-anchor" href="#verifying-parameter-usage" aria-label="Permalink to &quot;Verifying Parameter Usage&quot;">​</a></h2><p>Twizzar allows you to verify the usage of parameters in generic methods. Here&#39;s an example of verifying parameter usage for the <code>CreateList&lt;T&gt;()</code> method:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Verify_parameter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sut</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IGenericExampleBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Build</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">out</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    sut.</span><span style="color:#B392F0;">CreateList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">Verify</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.CreateListT)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">WhereItemsIs</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> items.</span><span style="color:#B392F0;">Contains</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> items.</span><span style="color:#B392F0;">Contains</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> items.</span><span style="color:#B392F0;">Contains</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">Called</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Verify_parameter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sut</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IGenericExampleBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Build</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">out</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    sut.</span><span style="color:#6F42C1;">CreateList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">Verify</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.CreateListT)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">WhereItemsIs</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> items.</span><span style="color:#6F42C1;">Contains</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> items.</span><span style="color:#6F42C1;">Contains</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> items.</span><span style="color:#6F42C1;">Contains</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">Called</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <code>WhereItemsIs</code> method now takes not only a predicate but also a type parameter. This addition is essential because Twizzar distinguishes between methods with different type arguments. Meanwhile, the Called(1) method confirms that the <code>CreateList&lt;T&gt;()</code> method was invoked once.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Twizzar&#39;s advanced features for handling generic methods in C# unit testing provide powerful capabilities for customizing, mocking, and verifying the behavior of these methods. With Twizzar, you can confidently test code that relies on generic methods with ease and precision.</p>`,30),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
